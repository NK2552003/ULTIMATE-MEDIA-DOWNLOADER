name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install FFmpeg (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install FFmpeg (macOS)
      if: runner.os == 'macOS'
      run: brew install ffmpeg
    
    - name: Install FFmpeg (Windows)
      if: runner.os == 'Windows'
      run: choco install ffmpeg
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 ultimate_downloader.py --count --select=E9,F63,F7,F82 --show-source --statistics || true
        # Exit-zero treats all errors as warnings
        flake8 ultimate_downloader.py --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics || true
    
    - name: Check code formatting with Black
      continue-on-error: true
      run: black --check ultimate_downloader.py || true
    
    - name: Test help command
      run: python ultimate_downloader.py --help
    
    - name: Test list platforms
      run: python ultimate_downloader.py --list-platforms

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 pylint mypy
    
    - name: Run Black
      continue-on-error: true
      run: black --check --diff ultimate_downloader.py || echo "Black formatting needed but continuing..."
    
    - name: Run flake8
      continue-on-error: true
      run: flake8 ultimate_downloader.py --max-line-length=120 --ignore=E501,W503,E203 || echo "Flake8 issues found but continuing..."
    
    - name: Run pylint
      continue-on-error: true
      run: pylint ultimate_downloader.py --max-line-length=120 || echo "Pylint issues found but continuing..."

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check dependencies for vulnerabilities
      continue-on-error: true
      run: safety check --file requirements.txt || echo "Security check completed with warnings"
    
    - name: Run Bandit security scan
      continue-on-error: true
      run: bandit -r ultimate_downloader.py -ll || echo "Bandit scan completed with warnings"

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install pdoc3
    
    - name: Create docs directory
      run: mkdir -p docs/api
    
    - name: Generate API documentation
      continue-on-error: true
      run: pdoc --html ultimate_downloader.py -o docs/api || echo "Documentation generation completed with warnings"
    
    - name: Upload documentation
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        if-no-files-found: warn

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test YouTube URL check
      run: python ultimate_downloader.py "https://www.youtube.com/watch?v=dQw4w9WgXcQ" --check-support
    
    - name: Test format listing
      run: python ultimate_downloader.py "https://www.youtube.com/watch?v=dQw4w9WgXcQ" --show-formats

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Upload to PyPI
      if: github.event_name == 'release' && github.event.action == 'created'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
    
    - name: Upload release assets
      if: github.event_name == 'release' && github.event.action == 'created'
      uses: softprops/action-gh-release@v2
      with:
        files: ./dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
